{"version":3,"sources":["components/Conversation/conversation.module.css","resources/logo.png","routes.js","axios.js","components/ChatPopup/ChatPopup.js","components/Conversation/Conversation.js","App.js","index.js","components/ChatPopup/chat-popup.module.css"],"names":["module","exports","FETCH_POPUP_MESSAGE","FETCH_ALL_MESSAGES","axios","Axios","create","baseURL","headers","Authorization","process","userId","ChatPopup","openChatBox","useState","user","setUser","popupMessage","setPopupMessage","isLoading","setIsLoading","useEffect","a","get","responseData","data","message","name","console","error","fetchPopupMessage","className","styles","hide","container","onClick","bind","dangerouslySetInnerHTML","__html","src","logo","alt","icon","BotContent","text","bot","botImage","WidgetContent","widget","Conversation","previousMessage","setPreviousMessage","messages","setMessages","prevMessages","fetchAllMessages","banner","bannerImage","bannerContent","chatBox","loader","color","map","index","provider","key","type","App","visible","setVisible","bool","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f380daeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"conversation_container__2JsTM\",\"banner\":\"conversation_banner__3Bq5j\",\"bannerImage\":\"conversation_bannerImage__3pKMF\",\"loader\":\"conversation_loader__1orY-\",\"botImage\":\"conversation_botImage__39xHv\",\"bannerContent\":\"conversation_bannerContent__2KZ91\",\"chatBox\":\"conversation_chatBox__kzuoz\",\"bot\":\"conversation_bot__1h4Yl\",\"widget\":\"conversation_widget__2i70B\"};","module.exports = __webpack_public_path__ + \"static/media/logo.cccde26f.png\";","export const FETCH_POPUP_MESSAGE =\n  '/getuser?url=insent-recruitment.web.app/&referralUrl=https://insent-recruitment.web.app/marketing-team';\n\nexport const FETCH_ALL_MESSAGES =\n  '/user/channels/private-ZJDmvmyxbKVnwNAuQ16002355539191600236168480';\n","import Axios from 'axios';\n\nconst axios = Axios.create({\n  baseURL: 'https://insentrecruit.api.insent.ai/',\n  headers: {\n    Authorization: process.env.REACT_APP_AUTHORIZATION,\n    userId: process.env.REACT_APP_USER_ID,\n  },\n});\n\nexport default axios;\n","import React, { useState, useEffect } from 'react';\nimport { FETCH_POPUP_MESSAGE } from '../../routes';\nimport axios from '../../axios';\nimport logo from '../../resources/logo.png';\nimport styles from './chat-popup.module.css';\n\nconst ChatPopup = ({ openChatBox }) => {\n  const [user, setUser] = useState('');\n  const [popupMessage, setPopupMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function fetchPopupMessage() {\n      try {\n        const responseData = await axios.get(FETCH_POPUP_MESSAGE);\n        const {\n          data: {\n            popupMessage: { message },\n            user: { name },\n          },\n        } = responseData;\n        setUser(name);\n        setPopupMessage(message);\n        setIsLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchPopupMessage();\n  }, []);\n\n  return (\n    <div\n      className={`${isLoading ? styles.hide : styles.container}`}\n      onClick={openChatBox.bind(null, true)}\n    >\n      <div className={styles.message}>\n        <h3>Hello {user}</h3>\n        <div\n          dangerouslySetInnerHTML={{\n            __html: popupMessage,\n          }}\n        ></div>\n      </div>\n      <img src={logo} alt=\"icon\" className={styles.icon} />\n    </div>\n  );\n};\n\nexport default ChatPopup;\n","import React, { useState, useEffect } from 'react';\nimport { FETCH_ALL_MESSAGES } from '../../routes';\nimport SyncLoader from 'react-spinners/SyncLoader';\nimport axios from '../../axios';\nimport logo from '../../resources/logo.png';\nimport styles from './conversation.module.css';\n\nconst Conversation = ({ openChatBox }) => {\n  const [previousMessage, setPreviousMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // state to display loader icon\n  useEffect(() => {\n    async function fetchAllMessages() {\n      try {\n        const { data: responseData } = await axios.get(FETCH_ALL_MESSAGES);\n        const { prevMessages, messages } = responseData;\n        setPreviousMessage(prevMessages);\n        setMessages(messages);\n        setIsLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchAllMessages();\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.banner}>\n        <img src={logo} alt=\"logo\" className={styles.bannerImage} />\n        <div className={styles.bannerContent}>\n          <h3>Insent</h3>\n          <p>You are chatting with InsentBot</p>\n        </div>\n        <span onClick={openChatBox.bind(null, false)}>X</span>\n      </div>\n      <div className={styles.chatBox}>\n        {/* display loaded until API call is done */}\n        {isLoading ? (\n          <div className={styles.loader}>\n            <SyncLoader color={'#097ef9'} />\n          </div>\n        ) : (\n          <>\n            {/* rendering all previous message of the conversation */}\n            {previousMessage.map((message, index) => {\n              if (message.provider === 'bot') {\n                return <BotContent key={index} text={message.text} />;\n              } else {\n                return <WidgetContent key={index} text={message.text} />;\n              }\n            })}\n            {/* rendering all message built in conversation */}\n            {messages.map((message, index) => {\n              if (message.type !== 'plainInput') {\n                return <BotContent key={index} text={message[message.type]} />;\n              } else return null; //display nothing in UI if type is plaintext\n            })}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst BotContent = ({ text }) => (\n  <div className={styles.bot}>\n    <img src={logo} alt=\"logo\" className={styles.botImage} />\n    <div\n      dangerouslySetInnerHTML={{\n        __html: text,\n      }}\n    ></div>\n  </div>\n);\n\nconst WidgetContent = ({ text }) => (\n  <div className={styles.widget}>\n    <div\n      dangerouslySetInnerHTML={{\n        __html: text,\n      }}\n    ></div>\n  </div>\n);\n\nexport default Conversation;\n","import React, { useState } from 'react';\nimport ChatPopup from './components/ChatPopup/ChatPopup';\nimport Conversation from './components/Conversation/Conversation';\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const openChatBox = (bool) => {\n    setVisible(bool);\n  };\n  return (\n    <>\n      {visible === false ? (\n        <ChatPopup openChatBox={openChatBox} />\n      ) : (\n        <Conversation openChatBox={openChatBox} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chat-popup_container__3ua4q\",\"hide\":\"chat-popup_hide__3lMOL\",\"message\":\"chat-popup_message__313Ne\",\"icon\":\"chat-popup_icon__3kJgJ\"};"],"sourceRoot":""}